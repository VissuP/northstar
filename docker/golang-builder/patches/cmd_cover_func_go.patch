--- a/cmd/cover/bak/func.go
+++ b/cmd/cover/func.go
@@ -94,11 +94,12 @@ func findFuncs(name string) ([]*FuncExte
 
 // FuncExtent describes a function's extent in the source by file and position.
 type FuncExtent struct {
-	name      string
-	startLine int
-	startCol  int
-	endLine   int
-	endCol    int
+	name       string
+	startLine  int
+	startCol   int
+	endLine    int
+	endCol     int
+	complexity int // cyclomatic (McCabe) complexity
 }
 
 // FuncVisitor implements the visitor that builds the function position list for a file.
@@ -116,13 +117,36 @@ func (v *FuncVisitor) Visit(node ast.Nod
 		start := v.fset.Position(n.Pos())
 		end := v.fset.Position(n.End())
 		fe := &FuncExtent{
-			name:      n.Name.Name,
+			name:      funcName(n), // was n.Name.Name
 			startLine: start.Line,
 			startCol:  start.Column,
 			endLine:   end.Line,
 			endCol:    end.Column,
 		}
 		v.funcs = append(v.funcs, fe)
+		fe.complexity++
+	case *ast.IfStmt, *ast.ForStmt, *ast.RangeStmt, *ast.CaseClause, *ast.CommClause:
+		if len(v.funcs) > 0 {
+			fe := v.funcs[len(v.funcs)-1]
+			if fe != nil {
+				fe.complexity++
+			}
+		} else {
+			start := v.fset.Position(n.Pos())
+			dbg.Printf("func.go: unexpected conditional before function at %d.%d\n", start.Line, start.Column)
+		}
+/*
+	case *ast.BinaryExpr:
+		if len(v.funcs) > 0 {
+			fe := v.funcs[len(v.funcs)-1]
+			if fe != nil && (n.Op == token.LAND || n.Op == token.LOR) {
+				fe.complexity++
+			}
+		} else {
+			start := v.fset.Position(n.Pos())
+			dbg.Printf("func.go: unexpected binary before function at %d.%d\n", start.Line, start.Column)
+		}
+*/
 	}
 	return v
 }
@@ -162,3 +186,26 @@ func findFile(file string) (string, erro
 	}
 	return filepath.Join(pkg.Dir, file), nil
 }
+
+// funcName returns the name representation of a function or method:
+// "(Type).Name" for methods or simply "Name" for functions.
+func funcName(fn *ast.FuncDecl) string {
+	if fn.Recv != nil {
+		typ := fn.Recv.List[0].Type
+		return fmt.Sprintf("(%s).%s", recvString(typ), fn.Name)
+	}
+	return fn.Name.Name
+}
+
+// recvString returns a string representation of recv of the
+// form "T", "*T", or "BADRECV" (if not a proper receiver type).
+func recvString(recv ast.Expr) string {
+	switch t := recv.(type) {
+	case *ast.Ident:
+		return t.Name
+	case *ast.StarExpr:
+		return "*" + recvString(t.X)
+	}
+	return "BADRECV"
+}
+

