{"version":"1.0","id":"7ebd5b2a-aae6-4dbe-b4d7-696be5a790e1","name":"NSQL Spark JSON Fetch","permissions":"Owner","cells":[{"id":"36e3faae-014b-4935-b069-3d42427cd143","name":"Insert","language":"lua","code":"local nsQL = require(\"nsQL\")\n\n\t\t\t\t\tfunction main()\n   \t\t\t\t \tlocal query = [[ INSERT INTO nssim.sampledata (id,json,rowid) VALUES ( '70bb549c-1c80-4596-a22f-fb926615aa5e','{\"name\": \"brians-bucket\",\"creationDate\": \"2017-05-31T21:07:44.111Z\"}','70bb549c-1c80-4596-a22f-fb926615aa5e');]]\n       \t\t\t\t \tlocal source = {\n       \t\t\t\t \t    Protocol = \"cassandra\",\n        \t\t\t\t \t   Host = \"cassandra1-dev2-northstar.mon-marathon-service.mesos,cassandra2-dev2-northstar.mon-marathon-service.mesos,cassandra3-dev2-northstar.mon-marathon-service.mesos,cassandra4-dev2-northstar.mon-marathon-service.mesos,cassandra5-dev2-northstar.mon-marathon-service.mesos\",\n         \t\t\t\t \t  Port = \"31814\",\n          \t\t\t\t \t Backend = \"native\"\n      \t\t\t\t \t }\n      \t\t\t\t \t processQuery(query, source, {})\n   \t\t\t\t \tend\n\n   \t\t\t\t \tfunction processQuery(query, source, options)\n    \t\t\t\t \t   local resp, err = nsQL.query(query, source, options)\n     \t\t\t\t \t  if(err ~= nil) then\n      \t\t\t\t \t     error(err)\n      \t\t\t\t \t end\n      \t\t\t\t \t return resp\n   \t\t\t\t \tend","output":{"lastExecution":"0001-01-01T00:00:00Z","state":"Success","stderr":"The execution has succeeded.","results":{}},"options":{"showCode":true,"showOutput":true,"timeout":180,"mainFunction":"main","visualization":{"parameters":null},"status":"success","showConfiguration":true}},{"id":"b28918ca-f059-4ace-a210-abb8d5caa151","name":"JSON_Fetch","language":"lua","code":"local nsQL = require(\"nsQL\")\n\t\t\t\tlocal nsOutput = require(\"nsOutput\")\n\n\t\t\t\tfunction main()\n    \t\t\t\tlocal query = [[\n    \t\t\t\t    SELECT  JSON_FETCH(json, 'name') as name\n    \t\t\t\t    FROM    nssim.sampledata\n    \t\t\t\t    WHERE   rowid = `70bb549c-1c80-4596-a22f-fb926615aa5e`;\n    \t\t\t\t]]\n    \t\t\t\tlocal source = {\n    \t\t\t\t    Protocol = \"cassandra\",\n    \t\t\t\t    Host = \"cassandra1-dev2-northstar.mon-marathon-service.mesos,cassandra2-dev2-northstar.mon-marathon-service.mesos,cassandra3-dev2-northstar.mon-marathon-service.mesos,cassandra4-dev2-northstar.mon-marathon-service.mesos,cassandra5-dev2-northstar.mon-marathon-service.mesos\",\n  \t\t\t\t\t\tPort = \"31814\",\n     \t\t\t\t   Backend = \"spark\"\n    \t\t\t\t}\n    \t\t\t\tlocal result = processQuery(query, source, {})\n    \t\t\t\treturn generateTable(result)\n\t\t\t\tend\n\n\t\t\t\tfunction processQuery(query, source, options)\n   \t\t\t\t local resp, err = nsQL.query(query, source, options)\n   \t\t\t\t if(err ~= nil) then\n   \t\t\t\t     error(err)\n   \t\t\t\t end\n   \t\t\t\t return resp\n\t\t\t\tend\n\n\t\t\t\tfunction generateTable(table)\n \t\t\t\t   local out, err = nsOutput.table(table)\n \t\t\t\t   if(err ~= nil) then\n \t\t\t\t       error(err)\n \t\t\t\t   end\n  \t\t\t\t  return out\n\t\t\t\tend","output":{"lastExecution":"0001-01-01T00:00:00Z","state":"Success","stderr":"The execution has succeeded.","elapsedTime":1,"results":{"type":"application/vnd.vz.table","content":{"columns":["name"],"rows":[["brians-bucket"]],"types":["string"]}}},"options":{"showCode":true,"showOutput":true,"timeout":180,"mainFunction":"main","visualization":{"parameters":{"type":"table","selectedColumns":[],"chartOptions":{}}},"status":"success","showConfiguration":true}},{"id":"0a7f84c6-ed9a-4353-b462-2f2512593607","name":"Untitled Cell","language":"markdown","code":"# Crash occurs here.\n","output":{"lastExecution":"0001-01-01T00:00:00Z","state":"Unknown","results":{"type":"","content":null}},"options":{"showCode":true,"showOutput":true,"timeout":180,"mainFunction":"main","visualization":{"parameters":null},"status":"","showConfiguration":true}},{"id":"8cac463d-f534-48ce-bcdf-06cc8827df19","name":"Untitled Cell","language":"html","code":"[Aug 8 22:00:55.553]:nsql.go:290:Validating response: {\"status\":\"Failed\",\"statusDescription\":\"<string>:23: nsQL spark transcompiler data source access error: Job aborted due to stage failure: Task 1 in stage 19.0 failed 4 times, most recent failure: Lost task 1.3 in stage 19.0 (TID 84, 10.46.7.1): java.lang.ClassCastException: cannot assign instance of $line4705162035.$read$$iwC$$iwC$$anonfun$1 to field org.apache.spark.sql.catalyst.expressions.ScalaUDF$$anonfun$3.func$3 of type scala.Function2 in instance of org.apache.spark.sql.catalyst.expressions.ScalaUDF$$anonfun$3\\n\\tat java.io.ObjectStreamClass$FieldReflector.setObjFieldValues(ObjectStreamClass.java:2133)\\n\\tat java.io.ObjectStreamClass.setObjFieldValues(ObjectStreamClass.java:1305)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2251)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.readArray(ObjectInputStream.java:1933)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1529)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)\\n\\tat scala.collection.immutable.$colon$colon.readObject(List.scala:362)\\n\\tat sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.lang.reflect.Method.invoke(Method.java:498)\\n\\tat java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1058)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2136)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)\\n\\tat scala.collection.immutable.$colon$colon.readObject(List.scala:362)\\n\\tat sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)\\n\\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.lang.reflect.Method.invoke(Method.java:498)\\n\\tat java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1058)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2136)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2245)\\n\\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2169)\\n\\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2027)\\n\\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\\n\\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)\\n\\tat org.apache.spark.serializer.JavaDeserializationStream.readObject(JavaSerializer.scala:76)\\n\\tat org.apache.spark.serializer.JavaSerializerInstance.deserialize(JavaSerializer.scala:115)\\n\\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:61)\\n\\tat org.apache.spark.scheduler.Task.run(Task.scala:89)\\n\\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:227)\\n\\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\\n\\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\\n\\tat java.lang.Thread.run(Thread.java:748)\\n\\nDriver stacktrace:\\nstack traceback:\\n\\t[G]: in function 'error'\\n\\t<string>:23: in function 'processQuery'\\n\\t<string>:16: in main chunk\\n\\t[G]: ?\",\"lastExecution\":\"0001-01-01T00:00:00Z\"}\n\n","output":{"lastExecution":"0001-01-01T00:00:00Z","state":"Unknown","results":{"type":"","content":null}},"options":{"showCode":true,"showOutput":true,"timeout":180,"mainFunction":"main","visualization":{"parameters":null},"status":"","showConfiguration":true}},{"id":"f57e134b-825b-44e9-a01b-dcbc9fdb03c0","name":"Delete Cell","language":"lua","code":"local nsQL = require(\"nsQL\")\n\n\t\t\t\tfunction main()\n    \t\t\t\tlocal query = [[\n \t\t\t\t       DELETE\n \t\t\t\t        FROM    nssim.sampledata\n \t\t\t\t       WHERE   rowid = `70bb549c-1c80-4596-a22f-fb926615aa5e`;\n \t\t\t\t   ]]\n \t\t\t\t   local source = {\n \t\t\t\t      Protocol = \"cassandra\",\n        \t\t\t  Host = \"cassandra1-dev2-northstar.mon-marathon-service.mesos,cassandra2-dev2-northstar.mon-marathon-service.mesos,cassandra3-dev2-northstar.mon-marathon-service.mesos,cassandra4-dev2-northstar.mon-marathon-service.mesos,cassandra5-dev2-northstar.mon-marathon-service.mesos\",\n  \t\t\t\t      Port = \"31814\",\n  \t\t\t\t      Backend = \"native\"\n  \t\t\t\t  }\n  \t\t\t\t  processQuery(query, source, {})\n\t\t\t\tend\n\n\t\t\t\tfunction processQuery(query, source, options)\n \t\t\t\t   local resp, err = nsQL.query(query, source, options)\n \t\t\t\t   if(err ~= nil) then\n \t\t\t\t       error(err)\n \t\t\t\t   end\n \t\t\t\t   return resp\n\t\t\t\tend","output":{"lastExecution":"0001-01-01T00:00:00Z","state":"Unknown","results":{"type":"","content":null}},"options":{"showCode":true,"showOutput":true,"timeout":180,"mainFunction":"main","visualization":{"parameters":null},"status":"","showConfiguration":true}}]}