SHELL := /bin/bash
DC ?= local
ENV ?= local

include $(ROOT)/launcher/make/env/common.mk
include $(ROOT)/launcher/make/env/$(DC).mk

DEFENVFILE?=$(ROOT)/make/env/$(DC)-default.mk
ENVFILE?=$(ROOT)/make/env/$(DC)-$(ENV).mk

ifneq ("$(wildcard $(ENVFILE))","")
include $(ENVFILE)
else
include $(DEFENVFILE)
endif

DOCKER_USER ?= mydocker
BUILD_ENV ?= dev
BASE_COMPILE_DIR?=$(PWD)
FILEPATH?=config/$(BUILD_ENV)-env.sh
COMMON_FILEPATH?=$(ROOT)/launcher/make/env/$(BUILD_ENV).mk
COMMON_FILEPATH_DEFALUT?=$(ROOT)/launcher/make/env/dev.mk

ifneq ("$(wildcard $(COMMON_FILEPATH))","")
include $(COMMON_FILEPATH)
else
include $(COMMON_FILEPATH_DEFALUT)
endif


DATACENTER_NAME?=$(GROUP)$(DC)$(ENV)
CLUSTER_NAME?=$(DATACENTER_NAME)

LOG_DATACENTER_NAME ?=$(GROUP)$(DC)$(ENV)logging
LOG_CLUSTER_NAME ?=$(LOG_DATACENTER_NAME)

CASSANDRA_PROTO_VERSION ?= 4
CASSANDRA_CQL_VERSION ?= 3.4.0
CASSANDRA_TAG ?= 3.9-1.1

MON_GROUP ?= $(GROUP)
CASSANDRA_STORAGE_PORT ?= 7000
USE_VAULT ?=false

BASE_REGISTRY_URI?=$(BASE_REGISTRY_HOST)\/$(DOCKER_USER)

MINIMUM_HEALTH_CAPACITY ?= 1
MAXIMUM_OVER_CAPACITY ?= 1

FALLBACK_LOCAL_FILEPATH=config/dev-env.sh
ifeq ("$(FILEPATH)", "config/local-env.sh")
ifeq ("$(wildcard $(FILEPATH))","")
FILEPATH=$(FALLBACK_LOCAL_FILEPATH)
endif
endif

ifeq ($(MARATHON_FORCE), true)
	FORCE_APPEND ?= ?force=true
endif

ifneq ("$(wildcard $(FILEPATH))","")
include $(FILEPATH)
endif

JQ_BIN ?= $(shell echo "docker run -i --privileged=true --rm \
	 -v $(ROOT):$(ROOT) \
	 -w $(PWD) \
	 $(DOCKER_REGISTRY_HOST_PORT)/$(DOCKER_USER)/jq-runner:1.0 " | tr -d '"')

UPGRADE_FILEPATH=config/upgrade.sh
ifneq ("$(wildcard $(UPGRADE_FILEPATH))","")
include $(UPGRADE_FILEPATH)
endif

# get version form git
branch = $(shell git rev-parse --abbrev-ref HEAD)
revision = $(shell git rev-list --reverse HEAD | awk "{ print NR }" | tail -n 1 |sed 's/.\{1\}/&./g'| rev | cut -c 2- | rev)
UPGRADE_VERSION = $(branch)-$(TAG)-$(BUILD_ENV)-$(revision)

# Use -1 value to use MAX_CPUS from config/{$ENV}-env.sh file
#DEAFULT_MIN_CPUS=-1
DEAFULT_MIN_CPUS ?=0.1

ifeq ($(DEAFULT_MIN_CPUS),-1)
	MAX_CPUS ?= 0.1
else
	MAX_CPUS = $(DEAFULT_MIN_CPUS)
endif

NUM_INSTANCES ?= $(NUM_PARTITIONS)

ifndef TAG
   TAG = $(USER)-$(shell date +'%Y.%m.%dT%H')
   $(warning TAG is not set; using default TAG=$(TAG) for build)
endif

IMAGE ?= $(DOCKER_REGISTRY_HOST_PORT)/$(DOCKER_USER)/$(FGROUP)-$(APP):$(TAG)
MARATHON_IMAGE ?= $(DOCKER_REGISTRY_IP_PORT)/$(DOCKER_USER)/$(FGROUP)-$(APP):$(TAG)

BASE_IMAGE ?= $(DOCKER_REGISTRY_HOST_PORT)/$(DOCKER_USER)/$(APP):$(TAG)
MARATHON_BASE_IMAGE ?= $(DOCKER_REGISTRY_IP_PORT)/$(DOCKER_USER)/$(APP):$(TAG)

IMAGE_PER_STACK ?= false

ifeq ($(IMAGE_PER_STACK), true)
        APP_SUFFIX=-$(DC)-$(ENV)
	IMAGE := $(IMAGE)$(APP_SUFFIX)
	MARATHON_IMAGE := $(MARATHON_IMAGE)$(APP_SUFFIX)
	BASE_IMAGE := $(BASE_IMAGE)$(APP_SUFFIX)
	MARATHON_BASE_IMAGE := $(MARATHON_BASE_IMAGE)$(APP_SUFFIX)
endif

BUILDER ?= $(DOCKER_REGISTRY_HOST_PORT)/$(DOCKER_USER)/go-builder:1.7.3
BUILDER_JAVA ?= $(DOCKER_REGISTRY_HOST_PORT)/$(DOCKER_USER)/java-builder:jdk8-gradle-2.13
BUILDER_JAVA_CMD ?= gradle clean build

PWD = $(shell pwd)

PROXYHELPER_PATH=$(BASEMAKEPATH)/$(PROXYHELPER_VERSION)
STARTUP_SCRIPT=startup.sh
STARTUP_SCRIPT_PATH=$(BASEMAKEPATH)/$(STARTUP_SCRIPT)

ifneq ($(AUTH_TOK), )
	ifneq ($(AUTH_COOKIE), )
		MARATHON_PARAMS=--cookie dcos-acs-auth-cookie=${AUTH_TOK}
	else
		MARATHON_PARAMS=--header "Authorization: token=${AUTH_TOK}"
	endif
else
	ifneq ($(MARATHON_AUTH), )
		MARATHON_USER_AUTH=-u $(MARATHON_AUTH)
	else
		MARATHON_USER_AUTH=
	endif
endif

comma:= ,
empty:=
space:= $(empty) $(empty)
DEFAULT_PORT :=0

ifndef CONTACT
    $(error CONTACT is not defined: e.g.[export CONTACT=xyz@one.verizon.com])
endif

MARATHON_TMPL ?= marathon.tmpl.json
MARATHON_APP_TMPL ?= marathon_app.tmpl.json
MARATHON_BASE_TMPL ?= $(BASEMAKEPATH)/marathon_base.tmpl.json
MARATHON_HOST_TML ?= $(BASEMAKEPATH)/marathon_host.tmpl.json
MARATHON_REXRAY_TML ?= $(BASEMAKEPATH)/marathon_with_rexraysio.tmpl.json
MARATHON_PORTWORX_TML ?= $(BASEMAKEPATH)/marathon_with_pwx.tmpl.json
MARATHON_FE_TML ?= $(BASEMAKEPATH)/marathon_fe.tmpl.json
MARATHON_TARGET ?= marathon.json
MARATHON_APP_TARGET ?= marathon_app.json
MARATHON_APP_TARGET_TEMP ?= marathon_app.json.temp
MARATHON_BASE_TARGET ?= marathon_base.json
MARATHON_FILE ?= marathon.json
MARATHON_CONSTRAINTS ?= '["hostname","UNIQUE"]'

MARATHON_VAULT_JSON ?= $(BASEMAKEPATH)/vault.json
MARATHON_VAULT_TMPL_JSON ?= $(BASEMAKEPATH)/vault_template.json
MARATHON_VAULT_TARGET_JSON ?= $(BASEMAKEPATH)/vault_temp.json

MARATHON_VAULT_ACCESS_BASE_TMPL ?= $(BASEMAKEPATH)/vault_access_base.tmpl.json
MARATHON_VAULT_ACCESS_BASE_TARGET ?= vault_access_base.json
MARATHON_VAULT_ACCESS_TMPL_JSON ?=vault_access_app.tmpl.json
MARATHON_VAULT_ACCESS_TARGET_JSON?=vault_access_app.json
MARATHON_VAULT_ACCESS_TEMP_JSON?=vault_access_app.temp.json

RLBK_MARATHON_TMPL ?= $(BASEMAKEPATH)/marathon_rlbk.tmpl.json
RLBK_MARATHON_TARGET ?= marathon_rlbk.json
RLBK_MARATHON_FILE ?= marathon_rlbk.json

ifeq ($(VOL_TYPE_CAS), true)
MARATHON_VOL_TML ?= $(BASEMAKEPATH)/marathon_vol_cas.tmpl.json
else
MARATHON_VOL_TML ?= $(BASEMAKEPATH)/marathon_vol.tmpl.json
endif

ifeq ($(APPSUB), log)
APPID ?= $(GROUP)/$(ENV)/log/$(APP)
REDIS_CORELATION_ID ?= $(GROUP)/$(ENV)/log/redis
else
APPID ?= $(GROUP)/$(ENV)/$(APP)
REDIS_CORELATION_ID ?= $(GROUP)/$(ENV)/redis
endif

MON_CORELATIONID ?= $(APPID)

ZOOKEEPER_ID_LIST :=$(shell for i in {1..$(ZOOKEEPER_CLUSTER_NODES)};do echo $$i; done )
ZOOKEEPER_APP_ID :=$(foreach var, $(ZOOKEEPER_ID_LIST),/$(GROUP)/$(ENV)/zookeeper$(var))
ZOOKEEPER_APP_ID :=$(subst $(space),$(comma),$(ZOOKEEPER_APP_ID))

ZOOKEEPER_CLUSTER_CONFIGS :=$(foreach var, $(ZOOKEEPER_ID_LIST),$(var):zookeeper$(var)-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX))
ZOOKEEPER_CLUSTER_CONFIGS :=$(subst $(space),$(comma),$(ZOOKEEPER_CLUSTER_CONFIGS))


ZOOKEEPER_MESOS_DNS :=$(foreach var, $(ZOOKEEPER_ID_LIST),zookeeper$(var)-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX):2181)
ZOOKEEPER_MESOS_DNS :=$(subst $(space),$(comma),$(ZOOKEEPER_MESOS_DNS))
ZOOKEEPER_HOST_PORT :=$(ZOOKEEPER_MESOS_DNS)

ifeq ($(KAFKA_INS_APP), true)
KAFKA_ID_LIST :=$(shell for i in {1..$(KAFKA_CLUSTER_NODES)};do echo $$i; done )
KAFKA_MESOS_DNS :=$(foreach var, $(KAFKA_ID_LIST),kafka$(var)-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX):9092)
KAFKA_MESOS_DNS :=$(subst $(space),$(comma),$(KAFKA_MESOS_DNS))
KAFKA_HOST_PORT :=$(KAFKA_MESOS_DNS)
KAFKA_BROKERS_HOST_PORT :=$(KAFKA_MESOS_DNS):9092
else
KAFKA_MESOS_DNS :=kafka-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX)
KAFKA_BROKERS_HOST_PORT :=$(KAFKA_MESOS_DNS):9092
endif

ifeq ($(DCOS_KAFKA_FRAMEWORK), true)
COUNT_LESS_1=$(shell expr $(KAFKA_CLUSTER_NODES) - 1)
KAFKA_ID_LIST :=$(shell for i in {0..$(COUNT_LESS_1)};do echo $$i; done )
KAFKA_MESOS_DCOS_DNS :=$(foreach var, $(KAFKA_ID_LIST),broker-$(var).$(GROUP)-$(ENV)-kafka.$(MESOS_DCOS_DNS_SUFIX):$(KAFKA_BROKER_PORT))
KAFKA_MESOS_DCOS_DNS :=$(subst $(space),$(comma),$(KAFKA_MESOS_DCOS_DNS))

KAFKA_BROKERS_HOST_PORT =$(KAFKA_MESOS_DCOS_DNS)
LOGGER_KAFKA_BROKERS_HOST_PORT ?=$(KAFKA_MESOS_DCOS_DNS)

endif

ifeq ($(CASS_STORE_DC), true)
	CASS_MESOS_DNS_SUFIX =$(STORE_DC_MESOS_DNS_SUFIX)
else
	CASS_MESOS_DNS_SUFIX =$(MESOS_DNS_SUFIX)
endif


ifeq ($(LOG_BASE_DC), true)
	LOG_MESOS_DNS_SUFIX =$(LOG_DC_MESOS_DNS_SUFIX)
else
	LOG_MESOS_DNS_SUFIX =$(MESOS_DNS_SUFIX)
endif

CASSANDRA_MESOS_DNS1 :=cassandra1-$(ENV)-$(GROUP).$(CASS_MESOS_DNS_SUFIX)
CASSANDRA_HOST_PORT1 :=$(CASSANDRA_MESOS_DNS1):9042

CASSANDRA_ID_LIST :=$(shell for i in {1..$(CASSANDRA_CLUSTER_NODES)};do echo $$i; done )
CASSANDRA_APP_ID :=$(foreach var, $(CASSANDRA_ID_LIST),/$(GROUP)/$(ENV)/cassandra$(var))
CASSANDRA_APP_ID :=$(subst $(space),$(comma),$(CASSANDRA_APP_ID))

CASSANDRA_CLUSTER_CONFIGS :=$(foreach var, $(CASSANDRA_ID_LIST),cassandra$(var)-$(ENV)-$(GROUP).$(CASS_MESOS_DNS_SUFIX))
CASSANDRA_CLUSTER_CONFIGS :=$(subst $(space),$(comma),$(CASSANDRA_CLUSTER_CONFIGS))
CASSANDRA_SEEDS :=$(CASSANDRA_CLUSTER_CONFIGS)


CASSANDRA_MESOS_DNS :=$(foreach var, $(CASSANDRA_ID_LIST),cassandra$(var)-$(ENV)-$(GROUP).$(CASS_MESOS_DNS_SUFIX))
CASSANDRA_MESOS_DNS :=$(subst $(space),$(comma),$(CASSANDRA_MESOS_DNS))

CASSANDRA_MESOS_DNS_PORT :=$(foreach var, $(CASSANDRA_ID_LIST),cassandra$(var)-$(ENV)-$(GROUP).$(CASS_MESOS_DNS_SUFIX):9042)
CASSANDRA_MESOS_DNS_PORT :=$(subst $(space),$(comma),$(CASSANDRA_MESOS_DNS))
CASSANDRA_HOST_PORT :=$(CASSANDRA_MESOS_DNS_PORT)

LOGGER_CASSANDRA_ID_LIST :=$(shell for i in {1..$(LOGGER_CASSANDRA_CLUSTER_NODES)};do echo $$i; done )
LOGGER_CASSANDRA_CLUSTER_CONFIGS :=$(foreach var, $(CASSANDRA_ID_LIST),cassandra$(var)-log-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX))
LOGGER_CASSANDRA_CLUSTER_CONFIGS :=$(subst $(space),$(comma),$(LOGGER_CASSANDRA_CLUSTER_CONFIGS))
LOGGER_CASSANDRA_SEEDS :=$(LOGGER_CASSANDRA_CLUSTER_CONFIGS)

LOGGER_CASSANDRA_MESOS_DNS :=$(LOGGER_CASSANDRA_MESOS_DNS)
LOGGER_CASSANDRA_HOST_PORT :=$(CASSANDRA_MESOS_DNS_PORT)
LOGGER_CASSANDRA_HOST :=$(CASSANDRA_MESOS_DNS)
LOGGER_CASSANDRA_CLUSTER_RF ?= 1
LOGGER_CASSANDRA_PROTO_VERSION ?= 4
LOGGER_CASSANDRA_CQL_VERSION ?= 3.4.0
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGOUT ?= 28800
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGERR ?= 28800
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_STATS ?= 28800
DKT_LOGCONSUMER_CREATE_COID_INDEX ?= false

CASSANDRA_HOST :=$(CASSANDRA_MESOS_DNS)

ifeq ($(DCOS_CASS_FRAMEWORK), true)
COUNT_LESS_1=$(shell expr $(CASSANDRA_CLUSTER_NODES) - 1)
CASSANDRA_ID_LIST :=$(shell for i in {0..$(COUNT_LESS_1)};do echo $$i; done )
CASSANDRA_MESOS_DCOS_DNS :=$(foreach var, $(CASSANDRA_ID_LIST),node-$(var).$(GROUP)-$(ENV)-cassandra.$(MESOS_DCOS_DNS_SUFIX))
CASSANDRA_MESOS_DCOS_DNS_PORT :=$(foreach var, $(CASSANDRA_ID_LIST),node-$(var).$(GROUP)-$(ENV)-cassandra.$(MESOS_DCOS_DNS_SUFIX):$(CASSANDRA_NATIVE_TRANSPORT_PORT))
CASSANDRA_MESOS_DCOS_DNS :=$(subst $(space),$(comma),$(CASSANDRA_MESOS_DCOS_DNS))
CASSANDRA_MESOS_DCOS_DNS_PORT :=$(subst $(space),$(comma),$(CASSANDRA_MESOS_DCOS_DNS_PORT))
CASSANDRA_HOST :=$(CASSANDRA_MESOS_DCOS_DNS)
LOGGER_CASSANDRA_HOST_PORT :=$(CASSANDRA_MESOS_DCOS_DNS_PORT)
CASSANDRA_HOST_PORT :=$(CASSANDRA_MESOS_DCOS_DNS_PORT)
endif

ifeq ($(CASSANDRA_NATIVE_TRANSPORT_PORT),)
CASSANDRA_NATIVE_TRANSPORT_PORT ?= 9042
endif

REDIS_MESOS_DNS :=redis-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX):6379
REDIS_HOST_PORT :=$(REDIS_MESOS_DNS)


INFLUXDB_ID_LIST :=$(shell for i in {1..$(INFLUXDB_CLUSTER_NODES)};do echo $$i; done )
INFLUXDB_APP_ID :=$(foreach var, $(INFLUXDB_ID_LIST),/$(GROUP)/influxdb$(var)/$(ENV))
INFLUXDB_APP_ID :=$(subst $(space),$(comma),$(INFLUXDB_APP_ID))

INFLUXDB_MESOS_DNS :=influxdb-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX)
INFLUXDB_HOST:= $(INFLUXDB_MESOS_DNS)

ELASTICSEARCH_CLUSTER_NODES := 5
ELASTICSEARCH_ID_LIST := $(shell for i in {1..$(ELASTICSEARCH_CLUSTER_NODES)};do echo $$i; done )
ELASTICSEARCH_MESOS_DNS := $(foreach i, $(ELASTICSEARCH_ID_LIST),elasticsearch$(i)-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX))
ELASTICSEARCH_MESOS_DNS := $(subst $(space),$(comma),$(ELASTICSEARCH_MESOS_DNS))
# Production uses staging Elasticsearch
ifeq ($(BUILD_ENV),prod)
	ES_ENV = staging
else
	ES_ENV = $(ENV)
endif
ELASTICSEARCH_URL := http://elasticsearch1-$(ES_ENV)-$(GROUP).$(MESOS_DNS_SUFIX):9200
ELASTICSEARCH_URLS := $(foreach i, $(ELASTICSEARCH_ID_LIST),http://elasticsearch$(i)-$(ES_ENV)-$(GROUP).$(MESOS_DNS_SUFIX):9200)
ELASTICSEARCH_URLS := $(subst $(space),$(comma),$(ELASTICSEARCH_URLS))

ifndef NOT_USE_MESOSDNS

INFLUXDB_MESOS_DNS :=influxdb-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX)
INFLUXDB_HOST_PORT :=$(INFLUXDB_MESOS_DNS):8086



SERV_INFLUXDB_PORT :=$(DEFAULT_PORT)

else
SERV_INFLUXDB_PORT :=$(INFLUXDB_PORT)

endif

CASSANDRA_MARATHON_IMAGE ?= $(DOCKER_REGISTRY_IP_PORT)/$(DOCKER_USER)/$(CASSANDRA_TAG)
LOG_CASSANDRA_MARATHON_IMAGE ?= $(DOCKER_REGISTRY_IP_PORT)/$(DOCKER_USER)/$(LOG_CASSANDRA_TAG)
CASSANDRAOPS_MARATHON_IMAGE ?= $(DOCKER_REGISTRY_IP_PORT)/$(DOCKER_USER)/cassandra-ops:$(TAG)
REDIS_MARATHON_IMAGE ?= $(DOCKER_REGISTRY_IP_PORT)/$(DOCKER_USER)/redis:$(REDIS_TAG)

REDISOPSMANAGER_MESOS_DNS :=redisopsmanager-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX):8000
LOGGER_REDISOPSMANAGER_MESOS_DNS :=redisopsmanager-log-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX):8000


WAIT_SEC_AFTER_SHUTDOWN_EVENT ?= 1
MAX_WAIT_SEC_INHAND_WORK_COMPLETION_SIGTERM ?= 4




ifeq ($(CASS_STORE_DC), true)
        CASS_MESOS_DNS_SUFIX =$(STORE_DC_MESOS_DNS_SUFIX)
else
        CASS_MESOS_DNS_SUFIX =$(MESOS_DNS_SUFIX)
endif

ifeq ($(LOG_BASE_DC), true)
	LOG_MESOS_DNS_SUFIX =$(LOG_DC_MESOS_DNS_SUFIX)
else
	LOG_MESOS_DNS_SUFIX =$(MESOS_DNS_SUFIX)
endif 

ifeq ($(USE_COMMON_LOGGING_PIPELINE),1)
COMMONLOG_MESOS_DNS_SUFIX ?= $(MESOS_DNS_SUFIX)
LOGGER_ZOOKEEPER_CLUSTER_NODES := 5
LOGGER_ZOOKEEPER_ID_LIST :=$(shell for i in {1..$(LOGGER_ZOOKEEPER_CLUSTER_NODES)};do echo $$i; done )
LOGGER_ZOOKEEPER_MESOS_DNS :=$(foreach var, $(LOGGER_ZOOKEEPER_ID_LIST),zookeeper$(var)-log-$(GROUP).$(COMMONLOG_MESOS_DNS_SUFIX):2181)
LOGGER_ZOOKEEPER_MESOS_DNS :=$(subst $(space),$(comma),$(LOGGER_ZOOKEEPER_MESOS_DNS))
LOGGER_ZOOKEEPER_HOST_PORT :=$(LOGGER_ZOOKEEPER_MESOS_DNS)
LOGGER_KAFKA_CLUSTER_NODES := 10
LOGGER_KAFKA_ID_LIST :=$(shell for i in {1..$(LOGGER_KAFKA_CLUSTER_NODES)};do echo $$i; done )
LOGGER_KAFKA_MESOS_DNS :=$(foreach var, $(LOGGER_KAFKA_ID_LIST),kafka$(var)-log-$(GROUP).$(COMMONLOG_MESOS_DNS_SUFIX):9092)
LOGGER_KAFKA_MESOS_DNS :=$(subst $(space),$(comma),$(LOGGER_KAFKA_MESOS_DNS))
LOGGER_KAFKA_BROKERS_HOST_PORT :=$(LOGGER_KAFKA_MESOS_DNS)
LOGGER_CASSANDRA_CLUSTER_NODES := 10
LOGGER_CASSANDRA_ID_LIST :=$(shell for i in {1..$(LOGGER_CASSANDRA_CLUSTER_NODES)};do echo $$i; done )
LOGGER_CASSANDRA_MESOS_DNS :=$(foreach var, $(LOGGER_CASSANDRA_ID_LIST),cassandra$(var)-log-$(GROUP).$(COMMONLOG_MESOS_DNS_SUFIX))
LOGGER_CASSANDRA_MESOS_DNS :=$(subst $(space),$(comma),$(LOGGER_CASSANDRA_MESOS_DNS))
LOGGER_CASSANDRA_HOST :=$(LOGGER_CASSANDRA_MESOS_DNS)
LOGGER_CASSANDRA_PORT := 9042
LOGGER_CASSANDRA_PROTO_VERSION := 4
LOGGER_CASSANDRA_CQL_VERSION := 3.4.0
LOGGER_CASSANDRA_CLUSTER_RF := 3
LOGGER_NUM_PARTITIONS := 20
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGOUT := 129600
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGERR := 129600
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_STATS := 129600
DKT_LOGCONSUMER_CREATE_COID_INDEX := true
LOGGER_CASSANDRA_HOST_PORT :=$(LOGGER_CASSANDRA_MESOS_DNS)
RULEENGINE_MESOS_DNS := ruleengine-log-$(GROUP).$(COMMON_MESOS_DNS_SUFIX)
else

LOGGER_CASSANDRA_CLUSTER_NODES ?= 1
LOGGER_CASSANDRA_PORT ?= 9042
LOGGER_CASSANDRA_PROTO_VERSION ?= 4
LOGGER_CASSANDRA_CQL_VERSION ?= 3.4.0
LOGGER_CASSANDRA_CLUSTER_RF ?= 1
LOGGER_NUM_PARTITIONS ?= 2
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGOUT ?= 28800
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGERR ?= 28800
DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_STATS ?= 28800
DKT_LOGCONSUMER_CREATE_COID_INDEX := false
RULEENGINE_MESOS_DNS := ruleengine-$(ENV)-$(GROUP).$(MESOS_DNS_SUFIX)

ifeq ($(USE_PROD_LOGGING),true)
	LOGGER_ZOOKEEPER_ID_LIST :=$(shell for i in {1..$(LOGGER_ZOOKEEPER_CLUSTER_NODES)};do echo $$i; done )
	LOGGER_ZOOKEEPER_MESOS_DNS :=$(foreach var, $(LOGGER_ZOOKEEPER_ID_LIST),zookeeper$(var)-log-$(ENV)-$(GROUP).$(LOG_MESOS_DNS_SUFIX):2181)
	LOGGER_ZOOKEEPER_MESOS_DNS :=$(subst $(space),$(comma),$(LOGGER_ZOOKEEPER_MESOS_DNS))
	LOGGER_ZOOKEEPER_HOST_PORT :=$(LOGGER_ZOOKEEPER_MESOS_DNS)
	LOGGER_ZOOKEEPER_CLUSTER_CONFIGS :=$(foreach var, $(LOGGER_ZOOKEEPER_ID_LIST),$(var):zookeeper$(var)-log-$(ENV)-$(GROUP).$(LOG_MESOS_DNS_SUFIX))
    LOGGER_ZOOKEEPER_CLUSTER_CONFIGS :=$(subst $(space),$(comma),$(LOGGER_ZOOKEEPER_CLUSTER_CONFIGS))
	ifeq ($(LOGGER_KAFKA_INS_APP), true)
		LOGGER_KAFKA_ID_LIST :=$(shell for i in {1..$(LOGGER_KAFKA_CLUSTER_NODES)};do echo $$i; done )
		LOGGER_KAFKA_MESOS_DNS :=$(foreach var, $(LOGGER_KAFKA_ID_LIST),kafka$(var)-log-$(ENV)-$(GROUP).$(LOG_MESOS_DNS_SUFIX):9092)
		LOGGER_KAFKA_MESOS_DNS :=$(subst $(space),$(comma),$(LOGGER_KAFKA_MESOS_DNS))
		LOGGER_KAFKA_BROKERS_HOST_PORT :=$(LOGGER_KAFKA_MESOS_DNS)
	else 
		LOGGER_KAFKA_MESOS_DNS :=kafka-log-$(ENV)-$(GROUP).$(LOG_MESOS_DNS_SUFIX)
		LOGGER_KAFKA_BROKERS_HOST_PORT :=$(LOGGER_KAFKA_MESOS_DNS):9092
	endif 
	LOGGER_CASSANDRA_ID_LIST :=$(shell for i in {1..$(LOGGER_CASSANDRA_CLUSTER_NODES)};do echo $$i; done )
	LOGGER_CASSANDRA_MESOS_DNS_PORT :=$(foreach var, $(LOGGER_CASSANDRA_ID_LIST),cassandra$(var)-log-$(ENV)-$(GROUP).$(CASS_MESOS_DNS_SUFIX):9042)
	LOGGER_CASSANDRA_MESOS_DNS_PORT :=$(subst $(space),$(comma),$(LOGGER_CASSANDRA_MESOS_DNS))
	LOGGER_CASSANDRA_MESOS_DNS :=$(foreach var, $(LOGGER_CASSANDRA_ID_LIST),cassandra$(var)-log-$(ENV)-$(GROUP).$(CASS_MESOS_DNS_SUFIX))
	LOGGER_CASSANDRA_MESOS_DNS :=$(subst $(space),$(comma),$(LOGGER_CASSANDRA_MESOS_DNS))
else
	LOGGER_NUM_PARTITIONS=$(NUM_PARTITIONS)
	LOGGER_ZOOKEEPER_HOST_PORT :=$(ZOOKEEPER_HOST_PORT)
	LOGGER_KAFKA_BROKERS_HOST_PORT = $(KAFKA_BROKERS_HOST_PORT)
	LOGGER_CASSANDRA_MESOS_DNS = $(CASSANDRA_MESOS_DNS)


endif
LOGGER_CASSANDRA_HOST_PORT :=$(LOGGER_CASSANDRA_MESOS_DNS_PORT)
LOGGER_CASSANDRA_HOST :=$(LOGGER_CASSANDRA_MESOS_DNS)
endif







wdir:
	@pwd


vault_base:wdir
ifeq ($(USE_VAULT)$(USE_VAULT_PER_SERVICE),truetrue)
	@echo -e "\033[0;34mcreating => \033[0;32m$(MARATHON_VAULT_ACCESS_BASE_TARGET)\033[0m"
	@sed \
	-e s#@APP_DC@#$(DC)# \
	-e s#@APP_ID@#$(APPID)# \
	$(MARATHON_VAULT_ACCESS_BASE_TMPL) > $(MARATHON_VAULT_ACCESS_BASE_TARGET)
endif

vault_app:vault_base
ifeq ($(USE_VAULT)$(USE_VAULT_PER_SERVICE),truetrue)
	@echo -e "\033[0;34mcreating => \033[0;32m$(MARATHON_VAULT_ACCESS_TARGET_JSON)\033[0m"
	@echo "Creating Vault Access Json file"
	$(shell sed '1d;$$d' $(MARATHON_VAULT_ACCESS_TMPL_JSON) > $(MARATHON_VAULT_ACCESS_TEMP_JSON) || (echo "vault_app failed $$?"; exit 1))
	$(shell sed -e '/@VAULT_SECRET@/ {' -e 'r $(MARATHON_VAULT_ACCESS_TEMP_JSON)' -e 'd' -e '}' $(MARATHON_VAULT_ACCESS_BASE_TARGET) > $(MARATHON_VAULT_ACCESS_TARGET_JSON))
	rm $(MARATHON_VAULT_ACCESS_TEMP_JSON)
	rm $(MARATHON_VAULT_ACCESS_BASE_TARGET)
endif

launcher_app:wdir
	@echo -e "\033[0;34mcreating => \033[0;32m$(MARATHON_APP_TARGET)\033[0m"
	@sed \
		-e s#@ENV@#$(ENV)#g \
		-e s#@DC@#$(DC)#g \
		-e s#@GROUP@#$(GROUP)#g \
		-e s#@APP@#$(APP)#g \
		-e s#@MON_GROUP@#$(MON_GROUP)# \
		-e s#@LOGGER_REDISOPSMANAGER_MESOS_DNS@#$(LOGGER_REDISOPSMANAGER_MESOS_DNS)# \
		-e s#@CASSANDRA_MESOS_DNS@#$(CASSANDRA_MESOS_DNS)# \
		-e s#@MON_APP@#$(APP)# \
		-e s#@LOGGER_ZOOKEEPER_APP_ID@#$(LOGGER_ZOOKEEPER_APP_ID)# \
		-e s#@CASSANDRA_PORT@#$(CASSANDRA_PORT)# \
		-e s#@CONTACT@#$(CONTACT)# \
		-e s#@CASSANDRA_MESOS_DNS1@#$(CASSANDRA_MESOS_DNS1)# \
		-e s#@IMAGE@#$(IMAGE)# \
		-e s#@BASE_IMAGE@#$(BASE_IMAGE)# \
		-e s#@APPID@#$(APPID)# \
		-e s#@MARATHON_IMAGE@#$(MARATHON_IMAGE)# \
		-e s#@MARATHON_BASE_IMAGE@#$(MARATHON_BASE_IMAGE)# \
		-e s#@ZOOKEEPER_HOST_PORT@#$(ZOOKEEPER_HOST_PORT)# \
		-e s#@INFLUXDB_MEM@#$(INFLUXDB_MEM)# \
		-e s#@DCOS_KAFKA_ZOOKEEPER_URI@#$(DCOS_KAFKA_ZOOKEEPER_URI)# \
		-e s#@MAX_MEMORY@#$(MAX_MEMORY)# \
		-e s#@HEAP_SIZE@#$(HEAP_SIZE)# \
		-e s#@HEALTHCHECK_HEAP_OPTS@#$(HEALTHCHECK_HEAP_OPTS)# \
		-e s#@LOGGER_ZOOKEEPER_HOST_PORT@#$(LOGGER_ZOOKEEPER_HOST_PORT)# \
		-e s#@CASSANDRA1_MESOS_DNS@#$(CASSANDRA1_MESOS_DNS)# \
		-e s#@LOGGER_KAFKA_BROKERS_HOST_PORT@#$(LOGGER_KAFKA_BROKERS_HOST_PORT)# \
		-e s#@KAFKA_CLUSTER_RF@#$(KAFKA_CLUSTER_RF)# \
		-e s#@CASSANDRA_CQL_VERSION@#$(CASSANDRA_CQL_VERSION)# \
		-e s#@LOGGER_CASSANDRA_CLUSTER_RF@#$(LOGGER_CASSANDRA_CLUSTER_RF)# \
		-e s#@REDIS_HOST_PORT@#$(REDIS_HOST_PORT)# \
		-e s#@CLUSTER_NAME@#$(CLUSTER_NAME)# \
		-e s#@OPS_MANAGER_APP_ID@#$(OPS_MANAGER_APP_ID)# \
		-e s#@HEAP_NEWSIZE@#$(HEAP_NEWSIZE)# \
		-e s#@DATACENTER@#$(DATACENTER_NAME)# \
		-e s#@CASSANDRA_API_PORT@#$(CASSANDRA_API_PORT)# \
		-e s#@CASSANDRA_HOST@#$(CASSANDRA_HOST)# \
		-e s#@GOMAXPROCS@#$(MAX_CPUS)# \
		-e s#@KAFKA_SERVICE_PORT@#$(KAFKA_SERVICE_PORT)# \
		-e s#@KAFKA_REST_HOST_PORT@#$(KAFKA_REST_HOST_PORT)# \
		-e s#@LOGGER_KAFKA_CLUSTER_RF@#$(LOGGER_KAFKA_CLUSTER_RF)# \
		-e s#@CASSANDRA_HOST_PORT1@#$(CASSANDRA_HOST_PORT1)# \
		-e s#@CASSANDRA_HOST_PORT@#$(CASSANDRA_HOST_PORT)# \
		-e s#@LOGGER_CASSANDRA_HOST_PORT@#$(LOGGER_CASSANDRA_HOST_PORT)# \
		-e s#@REDIS_APP_NAME@#$(REDIS_APP_ID)# \
		-e s#@LOGGER_ZOOKEEPER_CLUSTER_CONFIGS@#$(LOGGER_ZOOKEEPER_CLUSTER_CONFIGS)# \
		-e s#@CASSANDRAOPS_MARATHON_IMAGE@#$(CASSANDRAOPS_MARATHON_IMAGE)# \
		-e s#@LOGGER_CASSANDRA_APP_ID@#$(LOGGER_CASSANDRA_APP_ID)# \
		-e s#@LOGGER_CASSANDRA_STORAGE_APP_ID@#$(LOGGER_CASSANDRA_STORAGE_APP_ID)# \
		-e s#@LOGGER_CASSANDRA_CLUSTER_NODES@#$(LOGGER_CASSANDRA_CLUSTER_NODES)# \
		-e s#@LOGGER_CASSANDRA_SEEDS@#$(LOGGER_CASSANDRA_SEEDS)# \
		-e s#@ZOOKEEPER_APP_ID@#$(ZOOKEEPER_APP_ID)# \
		-e s#@KAFKA_APP_ID@#$(KAFKA_APP_ID)# \
		-e s#@CASSANDRA_PROTO_VERSION@#$(CASSANDRA_PROTO_VERSION)# \
		-e s#@LOGGER_NUM_PARTITIONS@#$(LOGGER_NUM_PARTITIONS)# \
		-e s#@NUM_PARTITIONS@#$(NUM_PARTITIONS)# \
		-e s#@KAFKA_REST_PORT@#$(KAFKA_REST_PORT)# \
		-e s#@INFLUXDB_PORT@#$(INFLUXDB_PORT)# \
		-e s#@INFLUXDB_SERVICE_HTTP_HOST_PORT@#$(INFLUXDB_HOST_PORT)# \
		-e s#@REDIS_MESOS_DNS@#$(REDIS_MESOS_DNS)# \
		-e s#@LOGGER_KAFKA_CLUSTER_NODES@#$(LOGGER_KAFKA_CLUSTER_NODES)# \
		-e s#@REDIS_PORT@#$(REDIS_PORT)# \
		-e s#@KAFKA_MESOS_DNS@#$(KAFKA_MESOS_DNS)# \
		-e s#@CASSANDRA_HOST@#$(CASSANDRA_HOST)# \
		-e s#@LOGGER_KAFKA_MESOS_DNS@#$(LOGGER_KAFKA_MESOS_DNS)# \
		-e s#@ZOOKEEPER_CLUSTER_CONFIGS@#$(ZOOKEEPER_CLUSTER_CONFIGS)# \
		-e s#@CASSANDRA_NATIVE_TRANSPORT_PORT@#$(CASSANDRA_NATIVE_TRANSPORT_PORT)# \
		-e s#@INFLUXDB_HOSTNAME@#$(INFLUXDB_HOSTNAME)# \
		-e s#@INFLUXDB_HOST@#$(INFLUXDB_HOST)# \
		-e s#@INFLUXDB_HOST_PORT@#$(INFLUXDB_HOST_PORT)# \
		-e s#@DOCKER_REGISTRY_IP_PORT@#$(DOCKER_REGISTRY_IP_PORT)# \
		-e s#@STATS_INTERVAL@#$(STATS_INTERVAL)# \
		-e s#@MARATHON_BASE_URL@#$(MARATHON_BASE_URL)# \
		-e s#@CASSANDRA_MARATHON_IMAGE@#$(CASSANDRA_MARATHON_IMAGE)# \
		-e s#@CASSANDRA_SEEDS@#$(CASSANDRA_SEEDS)# \
		-e s#@CASSANDRA_CLUSTER_SEED_NODES@#$(CASSANDRA_CLUSTER_SEED_NODES)# \
		-e s#@CASSANDRA_CLUSTER_NODES@#$(CASSANDRA_CLUSTER_NODES)# \
		-e s#@CASSANDRA_STORAGE_PORT@#$(CASSANDRA_STORAGE_PORT)# \
		-e s#@CASSANDRA_MEMTABLE_ALLOCATION_TYPE@#$(CASSANDRA_MEMTABLE_ALLOCATION_TYPE)# \
		-e s#@KAFKA_BROKER_PORT@#$(KAFKA_BROKER_PORT)# \
		-e s#@KAFKA_BROKERS_HOST_PORT@#$(KAFKA_BROKERS_HOST_PORT)# \
		-e s#@KAFKA_CLUSTER_NODES@#$(KAFKA_CLUSTER_NODES)# \
		-e s#@LOGGER_KAFKA_MESOS_DNS@#$(LOGGER_KAFKA_MESOS_DNS)# \
		-e s#@MARATHON_AUTH_TYPE@#$(MARATHON_AUTH_TYPE)# \
		-e s#@MARATHON_AUTH_URL@#$(MARATHON_AUTH_URL)# \
		-e s#@MARATHON_USERNAME@#$(MARATHON_USERNAME)# \
		-e s#@MARATHON_PASSWORD@#$(MARATHON_PASSWORD)# \
		-e s#@MARATHON_HOST@#$(MARATHON_HOST)# \
		-e s#@MARATHON_PORT@#$(MARATHON_PORT)# \
		-e s#@CASSANDRA_APP_ID@#$(CASSANDRA_APP_ID)# \
		-e s#@CASSANDRA_STORAGE_APP_ID@#$(CASSANDRA_STORAGE_APP_ID)# \
		-e s#@LOGGER_CASSANDRA_HOST@#$(LOGGER_CASSANDRA_HOST)# \
		-e s#@LOGGER_CASSANDRA_PORT@#$(LOGGER_CASSANDRA_PORT)# \
		-e s#@LOGGER_CASSANDRA_PROTO_VERSION@#$(LOGGER_CASSANDRA_PROTO_VERSION)# \
		-e s#@LOGGER_CASSANDRA_CQL_VERSION@#$(LOGGER_CASSANDRA_CQL_VERSION)# \
		-e s#@LOGGER_CASSANDRA_CLUSTER_RF@#$(LOGGER_CASSANDRA_CLUSTER_RF)# \
		-e s#@DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGOUT@#$(DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGOUT)# \
		-e s#@DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGERR@#$(DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGERR)# \
		-e s#@DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_STATS@#$(DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_STATS)# \
		-e s#@DKT_LOGCONSUMER_CREATE_COID_INDEX@#$(DKT_LOGCONSUMER_CREATE_COID_INDEX)# \
		-e s#@NUM_INSTANCES@#$(NUM_INSTANCES)# \
		-e s#@REDIS_MARATHON_IMAGE@#$(REDIS_MARATHON_IMAGE)# \
		-e s#@REDIS_CLUSTER_NODES@#$(REDIS_CLUSTER_NODES)# \
		-e s#@REDIS_CLUSTER_RF@#$(REDIS_CLUSTER_RF)# \
		-e s#@REDISOPSMANAGER_MESOS_DNS@#$(REDISOPSMANAGER_MESOS_DNS)# \
		-e s#@KZADMINREST_HOST_PORT@#$(KZADMINREST_HOST_PORT)# \
		-e s#@SERV_INFLUXDB_PORT@#$(SERV_INFLUXDB_PORT)# \
		-e s#@NOTIFICATION_LIBRARY_VERSION@#$(NOTIFICATION_LIBRARY_VERSION)# \
		-e s#@UPGRADE_VERSION@#$(UPGRADE_VERSION)# \
		-e s#@MINIMUM_HEALTH_CAPACITY@#$(MINIMUM_HEALTH_CAPACITY)# \
		-e s#@MAXIMUM_OVER_CAPACITY@#$(MAXIMUM_OVER_CAPACITY)# \
		-e s#@ELASTICSEARCH_MESOS_DNS@#$(ELASTICSEARCH_MESOS_DNS)# \
		-e s#@ELASTICSEARCH_URL@#$(ELASTICSEARCH_URL)# \
		-e s#@DKT_LOGGER_IS_KAFKA_ENABLED@#$(DKT_LOGGER_IS_KAFKA_ENABLED)# \
		-e s#@MESOS_DNS_SUFIX@#$(MESOS_DNS_SUFIX)# \
		-e s#@THINGSPACE_NOTIFICATION_HOST_PORT@#$(THINGSPACE_NOTIFICATION_HOST_PORT)# \
		-e s#@NSTAR_ZOOKEEPER_HOST_PORT@#$(NSTAR_ZOOKEEPER_HOST_PORT)# \
		-e s#@NSTAR_KAFKA_BROKERS_HOST_PORT@#$(NSTAR_KAFKA_BROKERS_HOST_PORT)# \
		-e s#@LOG_DATACENTER_NAME@#$(LOG_DATACENTER_NAME)# \
		-e s#@LOG_CLUSTER_NAME@#$(LOG_CLUSTER_NAME)# \
		-e s#@ZOOKEEPER_PORT@#$(ZOOKEEPER_PORT)# \
		-e s#@SEND_NOTIFICATION@#$(SEND_NOTIFICATION)# \
		-e s#@REDIS_CORELATION_ID@#$(REDIS_CORELATION_ID)# \
		$(MARATHON_APP_TMPL) > $(MARATHON_APP_TARGET)


marathon_base: launcher_app vault_app wdir
	@echo -e "\033[0;34mcreating => \033[0;32m$(MARATHON_TARGET)\033[0m"
	@sed \
		-e s#@ENV@#$(ENV)#g \
		-e s#@DC@#$(DC)#g \
		-e s#@GROUP@#$(GROUP)#g \
		-e s#@APP@#$(APP)#g \
		-e s#@MON_GROUP@#$(MON_GROUP)# \
		-e s#@MON_APP@#$(APP)# \
		-e s#@CONTACT@#$(CONTACT)# \
		-e s#@MARATHON_IMAGE@#$(MARATHON_IMAGE)# \
		-e s#@MARATHON_BASE_IMAGE@#$(MARATHON_BASE_IMAGE)# \
		-e s#@IMAGE@#$(IMAGE)# \
		-e s#@BASE_IMAGE@#$(BASE_IMAGE)# \
		-e s#@APPID@#$(APPID)# \
		-e s#@HOST@#$(HOST)# \
		-e s#@ZOOKEEPER_PORT@#$(ZOOKEEPER_PORT)# \
		-e s#@ZOOKEEPER_HOST_PORT@#$(ZOOKEEPER_HOST_PORT)# \
		-e s#@DCOS_KAFKA_ZOOKEEPER_URI@#$(DCOS_KAFKA_ZOOKEEPER_URI)# \
		-e s#@INFLUXDB_MEM@#$(INFLUXDB_MEM)# \
		-e s#@MAX_MEMORY@#$(MAX_MEMORY)# \
		-e s#@HEAP_SIZE@#$(HEAP_SIZE)# \
		-e s#@HEALTHCHECK_HEAP_OPTS@#$(HEALTHCHECK_HEAP_OPTS)# \
		-e s#@MEM@#$(MEM)# \
		-e s#@LOGGER_ZOOKEEPER_HOST_PORT@#$(LOGGER_ZOOKEEPER_HOST_PORT)# \
		-e s#@KAFKA_BROKERS_HOST_PORT@#$(KAFKA_BROKERS_HOST_PORT)# \
		-e s#@LOGGER_KAFKA_BROKERS_HOST_PORT@#$(LOGGER_KAFKA_BROKERS_HOST_PORT)# \
		-e s#@KAFKA_SERVICE_PORT@#$(KAFKA_SERVICE_PORT)# \
		-e s#@KAFKA_REST_HOST_PORT@#$(KAFKA_REST_HOST_PORT)# \
		-e s#@KAFKA_MESOS_DNS@#$(KAFKA_MESOS_DNS)# \
		-e s#@LOGGER_KAFKA_MESOS_DNS@#$(LOGGER_KAFKA_MESOS_DNS)# \
		-e s#@KAFKA_CLUSTER_RF@#$(KAFKA_CLUSTER_RF)# \
		-e s#@LOGGER_KAFKA_CLUSTER_RF@#$(LOGGER_KAFKA_CLUSTER_RF)# \
		-e s#@KAFKA_CLUSTER_NODES@#$(KAFKA_CLUSTER_NODES)# \
		-e s#@LOGGER_KAFKA_CLUSTER_NODES@#$(LOGGER_KAFKA_CLUSTER_NODES)# \
		-e s#@CASSANDRA_HOST_PORT@#$(CASSANDRA_HOST_PORT)# \
		-e s#@CASSANDRA_HOST@#$(CASSANDRA_HOST)# \
		-e s#@CASSANDRA_NATIVE_TRANSPORT_PORT@#$(CASSANDRA_NATIVE_TRANSPORT_PORT)# \
		-e s#@CASSANDRA_SEEDS@#$(CASSANDRA_SEEDS)# \
		-e s#@LOGGER_CASSANDRA_HOST@#$(LOGGER_CASSANDRA_HOST)# \
		-e s#@LOGGER_CASSANDRA_PORT@#$(LOGGER_CASSANDRA_PORT)# \
		-e s#@LOGGER_CASSANDRA_PROTO_VERSION@#$(LOGGER_CASSANDRA_PROTO_VERSION)# \
		-e s#@LOGGER_CASSANDRA_CQL_VERSION@#$(LOGGER_CASSANDRA_CQL_VERSION)# \
		-e s#@LOGGER_CASSANDRA_CLUSTER_RF@#$(LOGGER_CASSANDRA_CLUSTER_RF)# \
		-e s#@DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGOUT@#$(DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGOUT)# \
		-e s#@DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGERR@#$(DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_LOGERR)# \
		-e s#@DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_STATS@#$(DKT_LOGCONSUMER_CASSANDRA_RETENTION_PERIOD_STATS)# \
		-e s#@DKT_LOGCONSUMER_CREATE_COID_INDEX@#$(DKT_LOGCONSUMER_CREATE_COID_INDEX)# \
		-e s#@REDIS_PORT@#$(REDIS_PORT)# \
		-e s#@REDIS_HOST_PORT@#$(REDIS_HOST_PORT)# \
		-e s#@REDIS_MESOS_DNS@#$(REDIS_MESOS_DNS)# \
		-e s#@INFLUXDB_SERVICE_HTTP_HOST_PORT@#$(INFLUXDB_HOST_PORT)# \
		-e s#@INFLUXDB_HOSTNAME@#$(INFLUXDB_HOSTNAME)# \
		-e s#@INFLUXDB_HOST@#$(INFLUXDB_HOST)# \
		-e s#@INFLUXDB_HOST_PORT@#$(INFLUXDB_HOST_PORT)# \
		-e s#@INFLUXDB_PORT@#$(INFLUXDB_PORT)# \
		-e s#@ELASTICSEARCH_MESOS_DNS@#$(ELASTICSEARCH_MESOS_DNS)# \
		-e s#@ELASTICSEARCH_URL@#$(ELASTICSEARCH_URL)# \
		-e s#@ELASTICSEARCH_URLS@#$(ELASTICSEARCH_URLS)# \
		-e s#@DOCKER_REGISTRY_IP_PORT@#$(DOCKER_REGISTRY_IP_PORT)# \
		-e s#@STATS_INTERVAL@#$(STATS_INTERVAL)# \
		-e s#@MARATHON_BASE_URL@#$(MARATHON_BASE_URL)# \
		-e s#@MARATHON_AUTH_TYPE@#$(MARATHON_AUTH_TYPE)# \
		-e s#@MARATHON_AUTH_URL@#$(MARATHON_AUTH_URL)# \
		-e s#@MARATHON_USERNAME@#$(MARATHON_USERNAME)# \
		-e s#@MARATHON_PASSWORD@#$(MARATHON_PASSWORD)# \
		-e s#@MARATHON_CONSTRAINTS@#$(MARATHON_CONSTRAINTS)# \
		-e s#@AUTH_TOK@#$(AUTH_TOK)# \
		-e s#@MARATHON_HOST@#$(MARATHON_HOST)# \
		-e s#@MARATHON_PORT@#$(MARATHON_PORT)# \
		-e s#@ZOOKEEPER_APP_ID@#$(ZOOKEEPER_APP_ID)# \
		-e s#@LOGGER_ZOOKEEPER_APP_ID@#$(LOGGER_ZOOKEEPER_APP_ID)# \
		-e s#@KAFKA_APP_ID@#$(KAFKA_APP_ID)# \
		-e s#@NUM_PARTITIONS@#$(NUM_PARTITIONS)# \
		-e s#@LOGGER_NUM_PARTITIONS@#$(LOGGER_NUM_PARTITIONS)# \
		-e s#@KAFKA_REST_PORT@#$(KAFKA_REST_PORT)# \
		-e s#@CASSANDRA_APP_ID@#$(CASSANDRA_APP_ID)# \
		-e s#@CASSANDRA_STORAGE_APP_ID@#$(CASSANDRA_STORAGE_APP_ID)# \
		-e s#@LOGGER_CASSANDRA_APP_ID@#$(LOGGER_CASSANDRA_APP_ID)# \
		-e s#@LOGGER_CASSANDRA_STORAGE_APP_ID@#$(LOGGER_CASSANDRA_STORAGE_APP_ID)# \
		-e s#@LOGGER_CASSANDRA_CLUSTER_NODES@#$(LOGGER_CASSANDRA_CLUSTER_NODES)# \
		-e s#@CASSANDRA_CLUSTER_NODES@#$(CASSANDRA_CLUSTER_NODES)# \
		-e s#@CASSANDRA_CLUSTER_SEED_NODES@#$(CASSANDRA_CLUSTER_SEED_NODES)# \
		-e s#@CASSANDRA_MARATHON_IMAGE@#$(CASSANDRA_MARATHON_IMAGE)# \
		-e s#@LOG_CASSANDRA_MARATHON_IMAGE@#$(LOG_CASSANDRA_MARATHON_IMAGE)# \
		-e s#@CASSANDRAOPS_MARATHON_IMAGE@#$(CASSANDRAOPS_MARATHON_IMAGE)# \
		-e s#@ZOOKEEPER_CLUSTER_CONFIGS@#$(ZOOKEEPER_CLUSTER_CONFIGS)# \
		-e s#@LOGGER_ZOOKEEPER_CLUSTER_CONFIGS@#$(LOGGER_ZOOKEEPER_CLUSTER_CONFIGS)# \
		-e s#@REDIS_MARATHON_IMAGE@#$(REDIS_MARATHON_IMAGE)# \
		-e s#@REDIS_APP_NAME@#$(REDIS_APP_ID)# \
		-e s#@REDIS_CLUSTER_NODES@#$(REDIS_CLUSTER_NODES)# \
		-e s#@REDIS_CLUSTER_RF@#$(REDIS_CLUSTER_RF)# \
		-e s#@REDISOPSMANAGER_MESOS_DNS@#$(REDISOPSMANAGER_MESOS_DNS)# \
		-e s#@LOGGER_REDISOPSMANAGER_MESOS_DNS@#$(LOGGER_REDISOPSMANAGER_MESOS_DNS)# \
		-e s#@SERV_INFLUXDB_PORT@#$(SERV_INFLUXDB_PORT)# \
		-e s#@URIS@#$(URIS)# \
		-e s#@MON_PIPE_ID@#$(MON_PIPE_ID)# \
		-e s#@GOMAXPROCS@#$(MAX_CPUS)# \
		-e s#@NUM_INSTANCES@#$(NUM_INSTANCES)# \
		-e s#@UPGRADE_VERSION@#$(UPGRADE_VERSION)# \
		-e s#@ROLLBACK_VERSION@#$(ROLLBACK_VERSION)# \
		-e s#@MINIMUM_HEALTH_CAPACITY@#$(MINIMUM_HEALTH_CAPACITY)# \
		-e s#@MAXIMUM_OVER_CAPACITY@#$(MAXIMUM_OVER_CAPACITY)# \
		-e s#@DATACENTER@#$(DATACENTER_NAME)# \
		-e s#@CLUSTER_NAME@#$(CLUSTER_NAME)# \
		-e s#@LOG_DATACENTER_NAME@#$(LOG_DATACENTER_NAME)# \
		-e s#@LOG_CLUSTER_NAME@#$(LOG_CLUSTER_NAME)# \
		-e s#@CASSANDRA_PROTO_VERSION@#$(CASSANDRA_PROTO_VERSION)# \
		-e s#@CASSANDRA_CQL_VERSION@#$(CASSANDRA_CQL_VERSION)# \
		-e s#@EXECUTOR_VOLUME_DRIVER@#$(EXECUTOR_VOLUME_DRIVER)#g \
		-e s#@CASSANDRA_HOST_FILTER@#$(CASSANDRA_HOST_FILTER)#g \
		-e s#@CASSANDRA_EXECUTOR_DVDCLI@#$(CASSANDRA_EXECUTOR_DVDCLI)#g \
		-e s#@CASSANDRA_EXECUTOR_VOLUME_NAME@#$(CASSANDRA_EXECUTOR_VOLUME_NAME)#g \
		-e s#@EXECUTOR_HOST_FILTER@#$(EXECUTOR_HOST_FILTER)#g \
		-e s#@KAFKA_EXECUTOR_DVDCLI@#$(KAFKA_EXECUTOR_DVDCLI)#g \
		-e s#@KAFKA_EXECUTOR_VOLUME_NAME@#$(KAFKA_EXECUTOR_VOLUME_NAME)#g \
		-e s#@MON_CORELATIONID@#$(MON_CORELATIONID)#g \
		-e s#@KAFKA_BROKER_PORT@#$(KAFKA_BROKER_PORT)#g \
		-e s#@CASSANDRA_SSL_STORAGE_PORT@#$(CASSANDRA_SSL_STORAGE_PORT)#g \
		-e s#@CASSANDRA_STORAGE_PORT@#$(CASSANDRA_STORAGE_PORT)#g \
		-e s#@CASSANDRA_API_PORT@#$(CASSANDRA_API_PORT)#g \
		-e s#@CASSANDRA_JMX_PORT@#$(CASSANDRA_JMX_PORT)#g \
		-e s#@CASSANDRA_RPC_PORT@#$(CASSANDRA_RPC_PORT)#g \
		-e s#@CASSANDRA_NATIVE_TRANSPORT_PORT@#$(CASSANDRA_NATIVE_TRANSPORT_PORT)#g \
		-e s#@CASSANDRA_EXECUTOR_API_PORT@#$(CASSANDRA_EXECUTOR_API_PORT)#g \
		-e s#@WAIT_SEC_AFTER_SHUTDOWN_EVENT@#$(WAIT_SEC_AFTER_SHUTDOWN_EVENT)# \
		-e s#@MAX_WAIT_SEC_INHAND_WORK_COMPLETION_SIGTERM@#$(MAX_WAIT_SEC_INHAND_WORK_COMPLETION_SIGTERM)# \
		-e s#@FORCE_PULL_IMAGE@#$(FORCE_PULL_IMAGE)# \
		-e s#@REDIS_CORELATION_ID@#$(REDIS_CORELATION_ID)# \
		-e s#@DKT_LOGGER_DUMP_MSG_STDOUT@#$(DKT_LOGGER_DUMP_MSG_STDOUT)# \
		-e s#@SEND_NOTIFICATION@#$(SEND_NOTIFICATION)# \
		-e s#@DKT_LOGGER_IS_KAFKA_ENABLED@#$(DKT_LOGGER_IS_KAFKA_ENABLED)# \
		-e s#@INTERNAL_PROXY_IP@#$(INTERNAL_PROXY_IP)# \
		$(MARATHON_BASE_TMPL) > $(MARATHON_BASE_TARGET)
ifeq ($(USE_VAULT)$(USE_VAULT_PER_SERVICE),truetrue)
		@echo "adding vault configuration"
		@sed \
		-e s#@VAULT_CACERT@#$(VAULT_CACERT)#g \
		-e s#@VAULT_HOST_PORT@#$(VAULT_HOST_PORT)#g \
		-e s#@GATEKEEPER_HOST_PORT@#$(GATEKEEPER_HOST_PORT)#g \
		-e s#@GATEKEEPER_TLS_ENABLED@#$(GATEKEEPER_TLS_ENABLED)# \
		-e s#@VAULT_TLS_ENABLED@#$(VAULT_TLS_ENABLED)# \
		-e s#@VAULT_CERT_URI@#$(VAULT_CERT_URI)# \
		-e s#@APP_DC@#$(DC)# \
		-e s#@APP_ID@#$(APPID)# \
		-e s#@USE_VAULT@#$(USE_VAULT)# \
		-e s#@CASSANDRA_AUTH_ENABLED@#$(CASSANDRA_AUTH_ENABLED)# \
		$(MARATHON_VAULT_TMPL_JSON) > $(MARATHON_VAULT_JSON)
        #merge everything except uri part - this we will do outside launcher in make/Makefile
		$(JQ_BIN) -s '.[0] as $$o1 | .[1] as $$o2 | ($$o1 * $$o2) '  $(MARATHON_VAULT_JSON) $(MARATHON_BASE_TARGET)  > $(MARATHON_VAULT_TARGET_JSON)
		mv $(MARATHON_VAULT_TARGET_JSON) $(MARATHON_BASE_TARGET)
endif


marathon_rlbk:
	@echo -e "\033[0;34mcreating => \033[0;32m$(RLBK_MARATHON_TARGET)\033[0m"
	@sed \
		-e s#@APPID@#$(APPID)# \
		-e s#@UPGRADE_VERSION@#$(UPGRADE_VERSION)# \
		-e s#@ROLLBACK_VERSION@#$(ROLLBACK_VERSION)# \
		-e s#@MINIMUM_HEALTH_CAPACITY@#$(MINIMUM_HEALTH_CAPACITY)# \
		-e s#@MAXIMUM_OVER_CAPACITY@#$(MAXIMUM_OVER_CAPACITY)# \
		$(RLBK_MARATHON_TMPL) > $(RLBK_MARATHON_TARGET)

	# For bamboo
	cp $(RLBK_MARATHON_TARGET) $(DEPLOY_DIR)/marathon_rlbk.$(APP).json

compile:
	direnv allow
	docker run --rm -v $(ROOT):$(ROOT) -w $(BASE_COMPILE_DIR) -e GOPATH=$(GOPATH) $(BUILDER) go build -o $(APP)
	for subdir in ${SUBDIRS}; do $(MAKE) -C $(BASE_COMPILE_DIR)/$$subdir $@ ; done;

compile-java:
	docker run --rm -v ${HOME}/.gradle/caches:/root/.gradle/caches -v ${HOME}/.m2/repository:/root/.m2/repository -v $(ROOT):$(ROOT) -w $(BASE_COMPILE_DIR) $(BUILDER_JAVA) $(BUILDER_JAVA_CMD)

build_precond:
	@echo no-op

BUILD_PRE_TARGETS ?= build_precond compile marathon image clean

build: $(BUILD_PRE_TARGETS)

clean:
	@echo no-op

project_install:
	pwd;  \
	if [ -s module.json ]; \
	then \
		project install;  \
	else \
		echo "module.json not found ... skipping"; \
        fi;

image:
	make image_app
	for subdir in ${SUBDIRS}; do $(MAKE) -C $(BASE_COMPILE_DIR)/$$subdir $@; done;

image_app:
	cd $(BASE_COMPILE_DIR); \
	cp Dockerfile Dockerfile.backup; \
	cp -f $(PROXYHELPER_PATH) proxyhelper; \
	cp -f $(STARTUP_SCRIPT_PATH) . ;\
	sed \
		-e 's/LOGGER_TAG/'"$(LOGGER_TAG)"'/' \
		-e 's/VAULTHELPER_TAG/'"$(VAULTHELPER_TAG)"'/' \
		-e 's/APPBINARY/'"$(APPBINARY)"'/' \
		-e 's/STARTUP_SCRIPT/'"$(STARTUP_SCRIPT)"'/' \
		-e 's/CASSANDRA_TAG/'"$(CASSANDRA_TAG)"'/' \
		-e 's/DAKOTA_UBUNTU_LOGGER_IMAGE/'"$(DAKOTA_UBUNTU_LOGGER_IMAGE)"'/' \
		-e 's/DAKOTA_VAULTHELPER_IMAGE/'"$(DAKOTA_VAULTHELPER_IMAGE)"'/' \
		-e 's/DAKOTA_LOGGER_IMAGE/'"$(DAKOTA_LOGGER_IMAGE)"'/' \
		-e 's/DAKOTA_JAVA_LOGGER_IMAGE/'"$(DAKOTA_JAVA_LOGGER_IMAGE)"'/' \
		-e 's/BASE_REGISTRY_URI/$(BASE_REGISTRY_URI)/' \
                -e 's/NORTHSTAR_NGINX_SSL_CERT_FILE/$(NORTHSTAR_NGINX_SSL_CERT_FILE)/' \
                -e 's/NORTHSTAR_NGINX_SSL_KEY_FILE/$(NORTHSTAR_NGINX_SSL_KEY_FILE)/' \
                -e 's/SSL_CERT_FILE/$(SSL_CERT_FILE)/' \
                -e 's/SSL_KEY_FILE/$(SSL_KEY_FILE)/' \
                -e 's/NGINX_BASE_IMAGE/$(NGINX_BASE_IMAGE)/' \
		Dockerfile  > Dockerfile.tmp; \
	mv Dockerfile.tmp Dockerfile; \
	if [ -a $(FILEPATH) ];\
	then \
		IFS=$$'\n';\
		for line in `cat $(FILEPATH)| egrep -v "^[ ]*$|^[ ]*#"`; do echo $${line} ; echo "ENV $${line}" >> Dockerfile; done;\
	else \
		echo "$(FILEPATH) not found"; \
	fi; \
	docker build -t $(IMAGE) . || _code=$$?; \
	cp Dockerfile Dockerfile.generated; \
	mv Dockerfile.backup Dockerfile; \
	rm -f proxyhelper; \
	rm -f $(STARTUP_SCRIPT); \
	exit $$_code;

test:
	docker run --rm -v $(ROOT):$(ROOT) -w $(PWD) -e GOPATH=$(GOPATH) $(BUILDER) go test

push:
	docker push $(IMAGE)
	for subdir in ${SUBDIRS}; do $(MAKE) -C $(BASE_COMPILE_DIR)/$$subdir $@; done;

validate:
	docker run --rm -v $(shell pwd)/$(MARATHON_FILE):/app.json:ro $(BASE_REGISTRY_URI)/deployer -json /app.json -dc.registry.url $(DOCKER_REGISTRY_HOST_PORT) -dc.registry.user $(REGISTRY_USERNAME) -dc.registry.password $(REGISTRY_PASSWORD)

deploy: 
	curl $(CURL_OPTS) -X POST $(MARATHON_PARAMS) $(MARATHON_URL)$(FORCE_APPEND) $(MARATHON_USER_AUTH) -d @$(MARATHON_FILE) -H 'Content-type: application/json'
	for subdir in ${SUBDIRS}; do $(MAKE) -C $(BASE_COMPILE_DIR)/$$subdir $@; done;

deploy_bot:marathon
	cat marathon.json | python -c 'import json,sys;obj=json.load(sys.stdin);print "{ \"value\": \"|*|1|EVENT|||||||||Deploy service botc=" + json.dumps(json.dumps(obj))[1:-1] + "\"}"'  > rm.json; curl -X POST http://$(PROXY_IP)/$(RULEENGINE_MESOS_DNS)-dns/1323-port/mlogmsg/stderrlogging -H "Content-Type: application/json" -d  @rm.json; rm rm.json
	@echo "Message sent to $(RULEENGINE_MESOS_DNS) for deployment of $(APP) via RuleEngine"

status:
	curl $(CURL_OPTS) -X GET $(MARATHON_PARAMS) $(MARATHON_URL)/${APPID}?embed=apps.failures $(MARATHON_USER_AUTH) -d @$(MARATHON_FILE) -H 'Content-type: application/json'

status_all:
	curl $(CURL_OPTS) -s -X GET $(MARATHON_PARAMS) $(MARATHON_URL)/?embed=apps.failures $(MARATHON_USER_AUTH) -d @$(MARATHON_FILE) -H 'Content-type: application/json' | grep } |python -m json.tool

status_format:
	@curl -s $(CURL_OPTS) -X GET $(MARATHON_PARAMS) $(MARATHON_URL)/${APPID}*?embed=apps.failures $(MARATHON_USER_AUTH) -d @$(MARATHON_FILE) -H 'Content-type: application/json' |\
    grep -oE "\"id\":\"\/[a-z0-9]+\/[a-zA-Z]+\/[a-zA-Z0-9-]+|tasksStaged\":[0-9]|tasksRunning\":[0-9]|tasksHealthy\":[0-9]|tasksUnhealthy\":[0-9]" |     awk -F':' '{print $$2}' | sed 's/.*\///g'  |\
    awk 'BEGIN { printf "%26s %26s %26s %26s\n", "STAGED","RUNNING","HEALTHY","UNHEALTHY";} NR%5{printf "%-25s",$$0;next;}1'

ifeq ($(IMAGE_PER_STACK), true)
upgrade: build push marathon_rlbk upgrade_cmd
else
upgrade:marathon marathon_rlbk upgrade_cmd
endif

upgrade_cmd:
	curl $(CURL_OPTS) -X PUT $(MARATHON_PARAMS) \
		$(MARATHON_URL)/$(APPID)$(FORCE_APPEND) \
		$(MARATHON_USER_AUTH) \
		-d @$(MARATHON_FILE) -H 'Content-type: application/json'


rollback:marathon_rlbk rlbk_cmd

rlbk_cmd:
	curl $(CURL_OPTS) -X PUT $(MARATHON_PARAMS) \
		$(MARATHON_URL)/$(APPID)$(FORCE_APPEND) \
		$(MARATHON_USER_AUTH) \
		-d @$(RLBK_MARATHON_FILE) -H 'Content-type: application/json'

undeploy:
	curl $(CURL_OPTS) -X DELETE $(MARATHON_PARAMS) $(MARATHON_URL)/$(APPID)$(FORCE_APPEND) $(MARATHON_USER_AUTH)
	for subdir in ${SUBDIRS}; do $(MAKE) -C $(BASE_COMPILE_DIR)/$$subdir $@; done;

instanceid:
	curl $(CURL_OPTS) -X GET $(MARATHON_PARAMS) \
		$(MARATHON_URL)/$(APPID) \
		$(MARATHON_USER_AUTH) | $(JQ_BIN) '.app.tasks[].id' | tr -d '"' > .instanceids ; \
		echo ; \
		echo "Mesos task ids for $(APPID):" ; \
		cat .instanceids ; \
		rm .instanceids

instanceid_ins:
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
		curl $(CURL_OPTS) -X GET $(MARATHON_PARAMS) \
			$(MARATHON_URL)/$(APPID)$$number \
			$(MARATHON_USER_AUTH) | $(JQ_BIN) '.app.tasks[].id' | tr -d '"' > .instanceids.$$number ; \
			echo ; \
			echo "Mesos task ids for $(APPID)$$number:" ; \
			cat .instanceids.$$number ; \
			rm .instanceids.$$number ; \
			((number = number + 1)) ; \
	done

rollbacktags:rollbacktaglist
	 echo "" ; tail .v ; tail .rt

rollbacktaglist:versions
	echo "Rollback Tags of $(APPID)" >.rt
	for v in `cat .v`; do \
	curl  $(CURL_OPTS) $(MARATHON_PARAMS) \
		$(MARATHON_URL)/$(APPID)/versions/$$v \
		$(MARATHON_USER_AUTH) |$(JQ_BIN) . |grep  -A 1 labels|grep version | \
		cut -c17- |rev|cut -c2-|rev >>.rt ;\
	done
versions:
	echo "Deployed Versions of $(APPID)" >.v
	curl  $(CURL_OPTS) $(MARATHON_PARAMS) \
		$(MARATHON_URL)/$(APPID)/versions \
		$(MARATHON_USER_AUTH) |$(JQ_BIN) . |grep Z |cut -c6-29 >>.v

upgrade_service:
	echo "Checking for the current version of service" ;\
	DEPLOYED_ID=`curl  $(CURL_OPTS) $(MARATHON_PARAMS) \
		$(MARATHON_URL)/$(APPID) \
		$(MARATHON_USER_AUTH)|sed 's/^.*labels/labels/' |sed 's/}.*//' | awk '{split ($$0,a,":") ; print a[3]}'|sed 's/\"//g'`; \
	echo $$DEPLOYED_ID; \
	echo "Checking for the latest git commit id"; \
	CURRENT_ID=`git rev-parse HEAD`; \
	echo $$CURRENT_ID; \
	if [ "$$DEPLOYED_ID" == "$$CURRENT_ID" ]; then \
	echo "deployed service is in latest version so not performing the upgrade"; \
	else \
	echo "Deployed service not in latest version and will be upgraded"; \
	make build push; \
	make upgrade UPGRADE_VERSION=$$CURRENT_ID;\
	fi

upgrade-% :marathon ; @echo upgrading marathon$*.json ;\
				curl $(CURL_OPTS) -X PUT $(MARATHON_PARAMS) \
				$(MARATHON_URL)/$(APPID)$*$(FORCE_APPEND) \
				$(MARATHON_USER_AUTH) \
				-d @marathon$*.json -H 'Content-type: application/json' ; \


print-% : ; @echo $* = $($*)

#tragtes for indvidual app for cassandra and kafak
########################################################################################

marathon_ins: marathon_app
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
	INS_ID=$$number ;\
	sed \
		-e s/@INSID@/$$INS_ID/g \
		marathon_ins.json > marathon$$INS_ID.json ;	\
		echo Generated marathon$$INS_ID.json for instance-$$INS_ID; \
		cp marathon$$INS_ID.json  $(DEPLOY_DIR)/marathon.$(APP)$$INS_ID.json; \
	((number = number + 1)) ; \
	done


marathon_host:
	@if [ $(words $(HOST_IPS)) -gt 0 ]; then \
		for ip in $(HOST_IPS); \
		do \
			((count = count +1)); \
			marathon_file=marathon_host_$$count.json; \
			make marathon_host_ins MARATHON_TMPL=$(MARATHON_HOST_TML) APPID=$$app_id MARATHON_TARGET=$$marathon_file HOST_IPS=$$ip ; \
		done \
	else \
		echo "Zero HOST IPS for $(APP) [$(HOST_IPS)] ==>unset HOST_ENABLE " ; \
	fi


marathon_host_ins:
	@sed \
		-e s#@HOST_IPS@#$(HOST_IPS)# \
		-e s#@RESOURCE_ROLES@#$(RESOURCE_ROLES)# \
		$(MARATHON_HOST_TML) > $(MARATHON_TARGET)
	@\rm -f $(MARATHON_TARGET).tmp


marathon_exp_host: marathon_host
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
	INS_ID=$$number ;\
		$(JQ_BIN) -s '.[0] * .[1]' marathon$$INS_ID.json marathon_host_$$INS_ID.json > .marathon$$INS_ID.json ;\
		cp .marathon$$INS_ID.json  marathon$$INS_ID.json; \
		cp marathon$$INS_ID.json  $(DEPLOY_DIR)/marathon.$(APP)$$INS_ID.json; \
		rm .marathon$$INS_ID.json ; \
	((number = number + 1)) ; \
	done

marathon_rexray:
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
	INS_ID=$$number ;\
	((VOLID = number -1)); \
		sed \
			-e 's/@VOLID@/'"$$VOLID"'/' \
			-e 's/@ENV@/'"$(ENV)"'/' \
			-e 's/@CONT_PATH@/'"$(CONT_PATH)"'/' \
			-e 's/@APP@/'"$(APP)"'/' \
			-e 's/@APPSUB@/'"$(APPSUB)"'/' \
			-e 's/@GROUP@/'"$(GROUP)"'/' \
			$(MARATHON_REXRAY_TML) > marathon_rexray_$$INS_ID.json; \
		echo Generated marathon_rexray_$$INS_ID.json for instance-$$INS_ID; \
		$(JQ_BIN) -s '.[0] * .[1]' marathon$$INS_ID.json marathon_rexray_$$INS_ID.json > .marathon$$INS_ID.json ;\
		cp .marathon$$INS_ID.json  marathon$$INS_ID.json; \
		cp marathon$$INS_ID.json  $(DEPLOY_DIR)/marathon.$(APP)$$INS_ID.json; \
		rm .marathon$$INS_ID.json marathon_rexray_$$INS_ID.json ; \
	((number = number + 1)) ; \
	done

marathon_portworx:
	@echo -e "\033[0;34mcreating => \033[0;32mPORTWORX $(VOL_PATH)\033[0m"
	INS_ID=1; \
	for PORT_PATH in $(VOL_PATH); \
	do  \
		echo -e "\033[0;34mcreating => \033[0;32mPORTWORX $(PORT_PATH)\033[0m"; \
		sed \
			-e 's/@CONT_PATH@/'"$(CONT_PATH)"'/' \
			-e 's/@VOL_PATH@/'"$$PORT_PATH"'/' \
			$(MARATHON_PORTWORX_TML) > marathon_portwokx_$$INS_ID.json; \
		echo Generated marathon_portwokx_$$INS_ID.json for instance-$$INS_ID; \
		$(JQ_BIN) -s '.[0] * .[1]' marathon$$INS_ID.json marathon_portwokx_$$INS_ID.json > .marathon$$INS_ID.json ;\
		cp .marathon$$INS_ID.json  marathon$$INS_ID.json; \
		cp marathon$$INS_ID.json  $(DEPLOY_DIR)/marathon.$(APP)$$INS_ID.json; \
		rm .marathon$$INS_ID.json marathon_portwokx_$$INS_ID.json ; \
		((INS_ID = INS_ID + 1)) ; \
	done


marathon_vol:
	@if [ $(words $(VOL_PATH)) -gt 0 ]; then \
		for path in $(VOL_PATH); \
		do \
			((count = count +1)); \
			marathon_file=marathon_vol_$$count.json; \
			make marathon_vol_ins MARATHON_TMPL=$(MARATHON_VOL_TML) APPID=$$app_id MARATHON_TARGET=$$marathon_file VOL_PATH=$$path ; \
		done \
	else \
		echo "Zero VOL PATH for $(APP) [$(VOL_PATH)] ==>unset VOL_ENABLE " ; \
	fi


marathon_vol_ins:
	@sed \
		-e s#@VOL_PATH@#$(VOL_PATH)# \
		-e s#@CONT_PATH@#$(CONT_PATH)# \
		-e s#@MODE@#$(MODE)# \
		$(MARATHON_VOL_TML) > $(MARATHON_TARGET)
	@\rm -f $(MARATHON_TARGET).tmp


marathon_exp_vol: marathon_vol
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
	INS_ID=$$number ;\
		$(JQ_BIN) -s '.[0] * .[1]' marathon$$INS_ID.json marathon_vol_$$INS_ID.json > .marathon$$INS_ID.json ;\
		cp .marathon$$INS_ID.json  marathon$$INS_ID.json; \
		cp marathon$$INS_ID.json  $(DEPLOY_DIR)/marathon.$(APP)$$INS_ID.json; \
		rm .marathon$$INS_ID.json ; \
	((number = number + 1)) ; \
	done

marathon_fe2:
	@if [ $(words $(FE_IPS)) -gt 0 ]; then \
		for ip in $(FE_IPS); \
		do \
			((count = count +1)); \
			marathon_file=marathon_fe_$$count.json; \
			make marathon_fe_ins MARATHON_TMPL=$(MARATHON_FE_TML) APPID=$$app_id MARATHON_TARGET=$$marathon_file FE_IPS=$$ip ; \
		done \
	else \
		echo "Zero FE IPS for $(APP) [$(FE_IPS)] ==>unset FE_ENABLE " ; \
	fi


marathon_fe_ins:
	@sed \
		-e s#@FE_IPS@#$(FE_IPS)# \
		-e s#@FE_SERVICENAME@#$(FE_SERVICENAME)# \
		-e s#@FE_EXTADDR_DNSSVR@#$(FE_EXTADDR_DNSSVR)# \
		-e s#@FE_EXTNETNAME@#$(FE_EXTNETNAME)# \
		-e s#@FE_SERVERPORT@#$(FE_SERVERPORT)# \
		$(MARATHON_FE_TML) > $(MARATHON_TARGET)
	@\rm -f $(MARATHON_TARGET).tmp


marathon_exp_fe: marathon_fe2
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
	INS_ID=$$number ;\
		$(JQ_BIN) -s '.[0] * .[1]' marathon$$INS_ID.json marathon_fe_$$INS_ID.json > .marathon$$INS_ID.json ;\
		cp .marathon$$INS_ID.json  marathon$$INS_ID.json; \
		cp marathon$$INS_ID.json  $(DEPLOY_DIR)/marathon.$(APP)$$INS_ID.json; \
		rm .marathon$$INS_ID.json ; \
	((number = number + 1)) ; \
	done
#Upgrade rollback
########################################################################################
deploy_ins:
			number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
				curl $(CURL_OPTS) -X POST $(MARATHON_PARAMS) \
				$(MARATHON_URL)$(FORCE_APPEND) \
				$(MARATHON_USER_AUTH) \
				-d @marathon$$number.json -H 'Content-type: application/json' ; \
				((number = number + 1)) ; \
				echo "sleep $(DEPLOY_DELAY)" ;\
				sleep $(DEPLOY_DELAY) ;\
			done

undeploy_ins:
			number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
			curl $(CURL_OPTS) -X DELETE $(MARATHON_PARAMS) \
				$(MARATHON_URL)/$(APPID)$$number$(FORCE_APPEND) \
				$(MARATHON_USER_AUTH) ; \
				((number = number + 1)) ; \
			done

marathon_rlbk_ins:
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
	INS_ID=$$number ;\
	sed \
		-e s#@APPID@#$(APPID)# \
		-e s#@UPGRADE_VERSION@#$(UPGRADE_VERSION)# \
		-e s#@ROLLBACK_VERSION@#$(ROLLBACK_VERSION)# \
		-e s#@MINIMUM_HEALTH_CAPACITY@#$(MINIMUM_HEALTH_CAPACITY)# \
		-e s#@MAXIMUM_OVER_CAPACITY@#$(MAXIMUM_OVER_CAPACITY)# \
		-e s/@INSID@/$$INS_ID/g \
		$(RLBK_MARATHON_TMPL) > marathon_rlbk$$INS_ID.json ;	\
		echo Generated marathon_rlbk$$INS_ID.json for instance-$$INS_ID; \
		cp marathon_rlbk$$INS_ID.json  $(DEPLOY_DIR)/marathon_rlbk.$(APP)$$INS_ID.json; \
	((number = number + 1)) ; \
	done

upgrade_ins:marathon_rlbk_ins
			number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
				curl $(CURL_OPTS) -X PUT $(MARATHON_PARAMS) \
				$(MARATHON_URL)/$(APPID)$$number$(FORCE_APPEND) \
				$(MARATHON_USER_AUTH) \
				-d @marathon$$number.json -H 'Content-type: application/json' ; \
				((number = number + 1)) ; \
			done

rollback_ins:marathon_rlbk_ins
			number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
				curl $(CURL_OPTS) -X PUT $(MARATHON_PARAMS) \
				$(MARATHON_URL)/$(APPID)$$number$(FORCE_APPEND) \
				$(MARATHON_USER_AUTH) \
				-d @marathon_rlbk$$number.json -H 'Content-type: application/json' ; \
				((number = number + 1)) ; \
			done

rollbacktags_ins:rollbacktaglist_ins
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
		echo ""; \
		tail  .v$$number ; \
		tail  .rt$$number ; \
	 	((number = number + 1)) ; \
	done

rollbacktaglist_ins:versions_ins
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
		echo "Rollback Tags of $(APPID)$$number" >.rt$$number ; \
		for v in `cat .v$$number`; do \
			curl  $(CURL_OPTS) $(MARATHON_PARAMS) \
				$(MARATHON_URL)/$(APPID)$$number/versions/$$v \
				$(MARATHON_USER_AUTH) |$(JQ_BIN) . |grep  -A 1 labels|grep version | \
				cut -c17- |rev|cut -c2-|rev >>.rt$$number  ;\
		done ; \
		tail  .rt$$number ; \
	 	((number = number + 1)) ; \
	done

versions_ins:
	number=1 ; while [[ $$number -le $(CLUSTER_NODES) ]] ; do \
		echo "Deployed Versions of $(APPID)$$number" >.v$$number ; \
		curl  $(CURL_OPTS) $(MARATHON_PARAMS) \
			$(MARATHON_URL)/$(APPID)$$number/versions \
			$(MARATHON_USER_AUTH) |$(JQ_BIN) . |grep Z |cut -c6-29 >>.v$$number ; \
		tail  .v$$number ; \
		((number = number + 1)) ; \
	done

.PHONY: compile marathon build push deploy upgrade undeploy rollback rollbacktags versions check_fe validate
